import React from 'react'import styled from 'styled-components'import { useTable, useRowSelect } from 'react-table'// // import makeData from './makeData'//const StyledTable = styled.div`  padding: 1rem;  table {    border-spacing: 0;    border: 1px solid black;    tr {      :last-child {        td {          border-bottom: 0;        }      }    }    th,    td {      margin: 0;      padding: 0.5rem;      border-bottom: 1px solid black;      border-right: 1px solid black;      :last-child {        border-right: 0;      }    }  }`const IndeterminateCheckbox = React.forwardRef(    ({ indeterminate, ...rest }, ref) => {        const defaultRef = React.useRef()        const resolvedRef = ref || defaultRef        React.useEffect(() => {            resolvedRef.current.indeterminate = indeterminate        }, [resolvedRef, indeterminate])        return (            <>                <input type="checkbox" ref={resolvedRef} {...rest} />            </>        )    })function Table() {    const data = React.useMemo(        () => [            {                col1: '204845847',                col2: 'Алматы',                col3: '101001',                col4: 'Пр. Достык д. 25',                col5: 'Пр. Достык д. 25',                col6: 'Сениер',                col7: '43.252502°76.953135°',                col8: 'Да',            },            {                col1: '204845847',                col2: 'Алматы',                col3: '101001',                col4: 'Пр. Достык д. 25',                col5: 'Пр. Достык д. 25',                col6: 'Сениер',                col7: '43.252502°76.953135°',                col8: 'Да',            },            {                col1: '204845847',                col2: 'Алматы',                col3: '101001',                col4: 'Пр. Достык д. 25',                col5: 'Пр. Достык д. 25',                col6: 'Сениер',                col7: '43.252502°76.953135°',                col8: 'Да',            },        ],        []    )    const columns = React.useMemo(        () => [            {                Header: 'Код',                accessor: 'col1', // accessor is the "key" in the data            },            {                Header: 'Город',                accessor: 'col2',            },            {                Header: 'Почтовый индекс',                accessor: 'col3',            },            {                Header: 'Адрес маркетинговый',                accessor: 'col4',            },            {                Header: 'Адрес юридический',                accessor: 'col5',            },            {                Header: 'Формат',                accessor: 'col6',            },            {                Header: 'Координаты',                accessor: 'col7',            },            {                Header: 'Горит',                accessor: 'col8',            },            {                Header: '',                accessor: 'col9',            },        ],        []    )        const {        getTableProps,        getTableBodyProps,        headerGroups,        rows,        prepareRow,        selectedFlatRows,        state: { selectedRowIds },    } = useTable(        {            columns,            data,        },        useRowSelect,        hooks => {            hooks.visibleColumns.push(columns => [                // Let's make a column for selection                {                    id: 'selection',                    // The header can use the table's getToggleAllRowsSelectedProps method                    // to render a checkbox                    Header: ({ getToggleAllRowsSelectedProps }) => (                        <div>                            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />                        </div>                    ),                    // The cell can use the individual row's getToggleRowSelectedProps method                    // to the render a checkbox                    Cell: ({ row }) => (                        <div>                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />                        </div>                    ),                },                ...columns,            ])        }    )    return (                <StyledTable>            <table {...getTableProps()}>                <thead>                {headerGroups.map(headerGroup => (                    <tr {...headerGroup.getHeaderGroupProps()}>                        {headerGroup.headers.map(column => (                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>                        ))}                    </tr>                ))}                </thead>                <tbody {...getTableBodyProps()}>                {rows.slice(0, 10).map((row, i) => {                    prepareRow(row)                    return (                        <tr {...row.getRowProps()}>                            {row.cells.map(cell => {                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>                            })}                        </tr>                    )                })}                </tbody>            </table>            <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>            <pre>        <code>          {JSON.stringify(              {                  selectedRowIds: selectedRowIds,                  'selectedFlatRows[].original': selectedFlatRows.map(                      d => d.original                  ),              },              null,              2          )}        </code>      </pre>        </StyledTable>        // <table {...getTableProps()}        //        style={{        //            border: 'solid 1px #D3DFF0'        //        }}>        //     <thead>        //     {headerGroups.map(headerGroup => (        //         <tr {...headerGroup.getHeaderGroupProps()}>        //             {headerGroup.headers.map(column => (        //                 <th        //                     {...column.getHeaderProps()}        //                     style={{        //                         border: 'solid 1px #D3DFF0',        //                         padding: 5,        //                         fontSize: 14,        //                         color: "#1A1A1A",        //                     }}        //                 >        //                     {column.render('Header')}        //                 </th>        //             ))}        //         </tr>        //     ))}        //     </thead>        //     <tbody {...getTableBodyProps()}>        //     {rows.map(row => {        //         prepareRow(row)        //         return (        //             <tr {...row.getRowProps()}>        //                 {row.cells.map(cell => {        //                     return (        //                         <td        //                             {...cell.getCellProps()}        //                             style={{        //                                 padding: '10px',        //                                 border: 'solid 1px #D3DFF0',        //                             }}        //                         >        //                             {cell.render('Cell')}        //                         </td>        //                     )        //                 })}        //             </tr>        //         )        //     })}        //     </tbody>        // </table>    )}export default Table;