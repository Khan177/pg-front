import React from 'react'import styled from 'styled-components'import {useTable} from 'react-table'import "./../../../../../assets/fonts/sf-ui-display-cufonfonts-webfont/style.css"import datatable from "./DataTable/data"import columntable from "./DataTable/columns"const StyledTable = styled.div`  padding: 1rem;  table {    border-spacing: 0;    border: 1px solid #D3DFF0;    border-collapse: separate;    border-radius: 10px;        thead {        display: table-header-group;        vertical-align: middle;        border-color: inherit;        border-collapse: separate;    }    tr {        display: table-row;        vertical-align: inherit;        border-color: inherit;              :last-child {        td {          border-bottom: 0;        }      }      :nth-child(even) {        background-color: #F5F7FA;    }    th,    td {      text-align: left;      margin: 0;      padding: 0 15px;      vertical-align: middle;      height: 44px;      color: #1A1A1A;      font-family: "SF UI Display Light", sans-serif;      font-weight: 400;      font-size: 14px;      line-height: 16px;      white-space: nowrap;      overflow: hidden;      text-overflow: ellipsis;      :last-child {        border-right: 0;      }    }    td {    border-top: 1px solid  #D3DFF0;       }    thead:first-child tr:first-child th:first-child, tbody:first-child tr:first-child td:first-child {    border-radius: 10px 0 0 0;    }    thead:last-child tr:last-child th:first-child, tbody:last-child tr:last-child td:first-child {    border-radius: 0 0 0 10px;    }  }`function Table() {    const data = React.useMemo(() => datatable, [])    const columns = React.useMemo(() => columntable, [])    const {        getTableProps,        getTableBodyProps,        headerGroups,        rows,        prepareRow,    } = useTable(        {            columns,            data,        },    )    return (        <StyledTable>            <table {...getTableProps()}>                <thead>                {headerGroups.map(headerGroup => (                    <tr {...headerGroup.getHeaderGroupProps()}>                        {headerGroup.headers.map(column => (                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>                        ))}                    </tr>                ))}                </thead>                <tbody {...getTableBodyProps()}>                {rows.slice(0, 10).map((row, i) => {                    prepareRow(row)                    return (                        <tr {...row.getRowProps()}>                            {row.cells.map(cell => {                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>                            })}                        </tr>                    )                })}                </tbody>            </table>        </StyledTable>    )}export default Table;