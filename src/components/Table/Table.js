import React from "react";import {useSticky} from "react-table-sticky";import {    useBlockLayout,    useGlobalFilter,    usePagination,    useResizeColumns,    useTable} from 'react-table'import {Pagination, PaginationItem, PaginationLink} from 'reactstrap';import TableToExcel from "@linways/table-to-excel";import {    Styles,    PaginationStyled,    PaginationWrap, ToolbarControl, BtnPrint, BtnSettings, BtnExport,} from "./TableStyles/TableStyles";import {ControlToolbar, InputWrapper, StyledInput} from "../Styles/ControlToolbarStyle";import GlobalFilter from "./FilterGlobal";import {Section} from "../Styles/ComponentsStyles";export default function Table({columns, data}) {    const props = useTable(        {            columns,            data        },        useGlobalFilter, // useGlobalFilter!        usePagination,        useBlockLayout,        useSticky,        useResizeColumns    );    const {        getTableProps,        getTableBodyProps,        headerGroups,        prepareRow,        setGlobalFilter, /*GlobalFilter*/        page, // Instead of using 'rows', we'll use page - It is used by GlobalFilter and Pagination        canPreviousPage, /*Pagination */        canNextPage, /*Pagination */        pageOptions, /*Pagination */        pageCount, /*Pagination */        gotoPage, /*Pagination */        nextPage, /*Pagination */        previousPage, /*Pagination */        setPageSize, /*Pagination - onChange*/        state: {pageIndex, pageSize, globalFilter}, /*Pagination state*/    } =props;    console.log(props);    React.useEffect(() => {        // props.dispatch({ type: actions.resetPage })    }, [globalFilter]);    const exportBtnHandler = () => {        let table = document.getElementById('table1');        TableToExcel.convert(table)    }    return (        <>            <input                type="text"                value={globalFilter || ""}                onChange={e => setGlobalFilter(e.target.value)}            />            <Styles>                {/*<button onClick={resetResizing}>Reset Resizing</button>*/}                <div                    {...getTableProps()}                    className="table sticky"                    style={{width: "100%", height: 500}}                    id="table1"                >                    <div className="header">                        {headerGroups.map(headerGroup => (                            <div {...headerGroup.getHeaderGroupProps()} className="tr">                                {headerGroup.headers.map(column => (                                    <div {...column.getHeaderProps()} className="th">                                        {column.render("Header")}                                        {/* Use column.getResizerProps to hook up the events correctly */}                                        <div                                            {...column.getResizerProps()}                                            className={`resizer ${                                                column.isResizing ? 'isResizing' : ''                                            }`}                                        />                                    </div>                                ))}                            </div>                        ))}                    </div>                    <div {...getTableBodyProps()} className="body">                        {page.map((row, i) => {                            prepareRow(row);                            return (                                <div {...row.getRowProps()} className="tr">                                    {row.cells.map(cell => {                                        return (                                            <div {...cell.getCellProps()} className="td">                                                {cell.render("Cell")}                                            </div>                                        );                                    })}                                </div>                            );                        })}                    </div>                </div>                <PaginationStyled>                    <span>Показано&nbsp;<strong>{pageIndex + 1} из {pageOptions.length}</strong>{' '}</span>                    <PaginationWrap>                        <Pagination>                            <PaginationItem>                                <PaginationLink first onClick={() => gotoPage(0)} disabled={!canPreviousPage}/>                            </PaginationItem>                            <PaginationItem>                                <PaginationLink previous onClick={() => previousPage()} disabled={!canPreviousPage}/>                            </PaginationItem>                            <PaginationItem>                                <PaginationLink next onClick={() => nextPage()} disabled={!canNextPage}/>                            </PaginationItem>                            <PaginationItem>                                <PaginationLink last onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}/>                            </PaginationItem>                        </Pagination>                    </PaginationWrap>                    <select                        value={pageSize}                        onChange={e => {                            setPageSize(Number(e.target.value))                        }}                    >                        {[10, 20, 30, 40, 50].map(pageSize => (                            <option key={pageSize} value={pageSize}>                                {pageSize}                            </option>                        ))}                    </select>                </PaginationStyled>            </Styles>            </>    );}